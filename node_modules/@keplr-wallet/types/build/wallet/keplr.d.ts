import { ChainInfo } from "../chain-info";
import { BroadcastMode, AminoSignResponse, StdSignDoc, StdTx, OfflineSigner } from "@cosmjs/launchpad";
import { DirectSignResponse, OfflineDirectSigner } from "@cosmjs/proto-signing";
import { SecretUtils } from "secretjs/types/enigmautils";
import Long from "long";
export interface Key {
    readonly name: string;
    readonly algo: string;
    readonly pubKey: Uint8Array;
    readonly address: Uint8Array;
    readonly bech32Address: string;
}
export interface Keplr {
    readonly version: string;
    experimentalSuggestChain(chainInfo: ChainInfo): Promise<void>;
    enable(chainId: string): Promise<void>;
    getKey(chainId: string): Promise<Key>;
    signAmino(chainId: string, signer: string, signDoc: StdSignDoc): Promise<AminoSignResponse>;
    signDirect(chainId: string, signer: string, signDoc: {
        /** SignDoc bodyBytes */
        bodyBytes?: Uint8Array | null;
        /** SignDoc authInfoBytes */
        authInfoBytes?: Uint8Array | null;
        /** SignDoc chainId */
        chainId?: string | null;
        /** SignDoc accountNumber */
        accountNumber?: Long | null;
    }): Promise<DirectSignResponse>;
    sendTx(chainId: string, stdTx: StdTx, mode: BroadcastMode): Promise<Uint8Array>;
    getOfflineSigner(chainId: string): OfflineSigner & OfflineDirectSigner;
    suggestToken(chainId: string, contractAddress: string): Promise<void>;
    getSecret20ViewingKey(chainId: string, contractAddress: string): Promise<string>;
    getEnigmaUtils(chainId: string): SecretUtils;
    getEnigmaPubKey(chainId: string): Promise<Uint8Array>;
    enigmaEncrypt(chainId: string, contractCodeHash: string, msg: object): Promise<Uint8Array>;
    enigmaDecrypt(chainId: string, ciphertext: Uint8Array, nonce: Uint8Array): Promise<Uint8Array>;
}
